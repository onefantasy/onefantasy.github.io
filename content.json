{"pages":[{"title":"categories","text":"","link":"/categories/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"网络上那些面试题-试题1","text":"题目请写出以下代码的输出结果。123456789101112131415161718function Foo() { Foo.a = function() { console.log(1) } this.a = function() { console.log(2) }}Foo.prototype.a = function() { console.log(3)}Foo.a = function() { console.log(4)}Foo.a();let obj = new Foo();obj.a();Foo.a(); 答案 4 2 1 分析 1 ~ 8行只是定义了一个函数，并没有执行 9 ~ 11行在这个Foo这个对象的原型上添加了一个a的函数 12 ~ 14行为Foo这个函数添加了一个自定义的方法a，故在调用a时，会在自身中找到。 15行调用了Foo.a()，实际上是调用了12 ~ 14行所添加的a方法，因为函数里定义的Foo.a因为Foo函数此时还没有执行，所以没有生效。 16行new了一个新的Foo的对象obj，同时也执行了Foo函数。因此回到2 ~ 4行，这部分代码为Foo改写了a方法，故以后Foo.a = function(){console.log(1)}；而在4 ~ 7行中，this指向调用Foo的对象obj，故obj.a = function(){console.log(2)}。 17行，此时obj.a = function(){console.log(2)} 18行，此时Foo.a已经被自身函数的代买改写了，故此时Foo.a = function(){console.log(1)}","link":"/2019/08/08/网络上那些面试题-试题1/"},{"title":"网络上那些面试题-试题2","text":"题目用 JavaScript 写一个函数，输入 int 型，返回整数逆序后的字符串。如：输入整型 1234，返回字符串“4321”。要求必须使用递归函数调用，不能用全局变量，输入函数必须只有一个参数传入，必须返回字符串。答案个人答案： 1234567function reverseOrder(str){ str += &apos;&apos;; if(str.length &lt;= 1) return str; let str1 = reverseOrder(str.slice(0,str.length/2)); let str2 = reverseOrder(str.slice(str.length/2)); return str2+str1;} 这个答案采用的是分治的思想，将一个大问题分解成无数个相同的小问题进行求解，直到无法继续分割(即字符串只剩一个字符为止)，然后按照相反的顺序进行返回，就能得出最终结果。 关于这个问题在网络有许多解法，基本的思想都是将int型数据转成字符串，然后将第一个或最后一个字符切割出来，拼接到另一端的位置，或者将这个int型数据去除以10求余，然后执行与字符串类似的拼接操作。","link":"/2019/08/09/网络上那些面试题-试题2/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/08/08/hello-world/"}],"tags":[{"name":"JS","slug":"JS","link":"/tags/JS/"},{"name":"面试","slug":"面试","link":"/tags/面试/"}],"categories":[{"name":"web前端","slug":"web前端","link":"/categories/web前端/"}]}